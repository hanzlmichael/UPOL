(defun gener3 (n)
  (let* ((c1 nil)
         (c2 nil)
         (res 0)
         (count-1 0)
         (sem1 (semaphore 1))
         (sem2 (semaphore 0))
         (sem3 (semaphore 0))
         (sem4 (semaphore 1)))
    (pprogn
     (loop while (< count-1 n) do
           (wait-on-semaphore sem1)
           (setf c1 (random 100))
           (setf c2 (random 100))
           (signal-semaphore sem2))
     (loop while (< count-1 n) do
           (wait-on-semaphore sem2)           
           (wait-on-semaphore sem4)
           (if (> (gcd c1 c2) 1)
               (setf res 1)
             (setf res 0))
           (signal-semaphore sem1)
           (signal-semaphore sem3))
     (loop while (< count-1 n) do
           (wait-on-semaphore sem3)
           (if (eql res 1)
               (incf count-1))
           (signal-semaphore sem4)))
    count-1))