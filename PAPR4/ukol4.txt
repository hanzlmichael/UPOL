;; ukol 04
(defclass safe-stack ()
  ((mutex :initform (semaphore 1))
   (buffer :initform nil)))
(defmethod mutex ((s safe-stack))
  (slot-value s 'mutex))
(defmethod buffer ((s safe-stack))
  (slot-value s 'buffer))
(defmethod set-buffer ((s safe-stack) item)
  (setf (slot-value s 'buffer) (append (list item) (buffer s))))
(defmethod safe-push ((s safe-stack) item)
  (wait-on-semaphore (mutex s))
  (set-buffer s item)
  (signal-semaphore (mutex s))
  (buffer s))
(defmethod safe-pop ((s safe-stack))
  (let ((removed nil))
    (wait-on-semaphore (mutex s))
    (setf removed (car (buffer s)))
    (setf (slot-value s 'buffer) (cdr (buffer s)))
    (signal-semaphore (mutex s))
    removed))
(defmethod isEmpty ((s safe-stack))
  (wait-on-semaphore (mutex s))
  (if (= 0 (length (buffer s))) t nil)
  (signal-semaphore (mutex s)))