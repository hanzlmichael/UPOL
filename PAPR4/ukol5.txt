(in-package :papr4/user)
;; ukol 05
(defclass mySID ()
  ((buffer :initform nil)
   (notSearching :initform (semaphore 1))
   (notInserting :initform (semaphore 1))
   (insertSem :initform (semaphore 1))
   (searchMutex :initform (semaphore 1))
   (insertMutex :initform (semaphore 1))
   (numSearcher :initform 0)
   (numInserter :initform 0)))
(defmethod notSearching ((sid mySID))
  (slot-value sid 'notSearching))
(defmethod notInserting ((sid mySID))
  (slot-value sid 'notInserting))
(defmethod insertSem ((sid mySID))
  (slot-value sid 'notSearching))
(defmethod searchMutex ((sid mySID))
  (slot-value sid 'searchMutex))
(defmethod insertMutex ((sid mySID))
  (slot-value sid 'insertMutex))
(defmethod numSearcher ((sid mySID))
  (slot-value sid 'numSearcher))
(defmethod numInserter ((sid mySID))
  (slot-value sid 'numInserter))
(defmethod buffer ((sid mySID))
  (slot-value sid 'buffer))
(defmethod searcher ((sid mySID) value)
  (let ((searched nil))
    (wait-on-semaphore (searchMutex sid))
    (incf (slot-value sid 'numSearcher))
    (if (= (numSearcher sid) 1)
        (wait-on-semaphore (notSearching sid)))
    (signal-semaphore (searchMutex sid))
    (find value (buffer sid))
    (setf searched (find value (buffer sid)))
    (wait-on-semaphore (searchMutex sid))
    (decf (slot-value sid 'numSearcher))
    (if (= (numSearcher sid) 0) (signal-semaphore (notSearching sid)))
    (signal-semaphore (searchMutex sid))
    searched))
(defmethod inserter ((sid mySID) value)
  (wait-on-semaphore (insertMutex sid))
  (incf (slot-value sid 'numInserter))
  (if (= (numInserter sid) 1) 
      (wait-on-semaphore (notInserting sid)))
  (signal-semaphore (insertMutex sid))
  (wait-on-semaphore (insertSem sid))
  (setf (slot-value sid 'buffer) (append (buffer sid) (list value)))
  (signal-semaphore (insertSem sid))
  (wait-on-semaphore (insertMutex sid))
  (decf (slot-value sid 'numInserter))
  (if (= (numInserter sid) 0) (signal-semaphore (notInserting sid)))
  (signal-semaphore (insertMutex sid))
  (buffer sid))
(defmethod deleter ((sid mySID) value)
  (wait-on-semaphore (notSearching sid))
  (wait-on-semaphore (notInserting sid))
  (setf (slot-value sid 'buffer) (remove value (buffer sid)))
  (signal-semaphore (notInserting sid))
  (signal-semaphore (notSearching sid))
  (buffer sid))